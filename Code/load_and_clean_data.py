import copy
import numpy as np
import pandas as pd
import math
from IPython.core.display import display
import re

image_features_dir_default = r'https://s3.amazonaws.com/data558filessuman/DataCompetitionfiles/sampledata'
#the below is the final version since I have already run the other function loadandextractcleandata to clean the data
#and uploaded the cleaned data into S3.
#We will need to use loadandextractcleandata for any new data samples generated by running the kernix example
#and that too only until the feature extraction code is modified to output the final directory and not the full path
def load_image_data(image_features_dir = image_features_dir_default, header=None, standardize=0):
    train_features = np.asarray(pd.read_csv(image_features_dir + r'/train_features.csv', header=header).iloc[:, :])
    train_labels = np.asarray(pd.read_csv(image_features_dir + r'/train_labels.csv', header=header).iloc[:, 0])

    test_features = np.asarray(pd.read_csv(image_features_dir + r'/test_features.csv', header=header).iloc[:,:])
    test_labels = np.asarray(pd.read_csv(image_features_dir + r'/test_labels.csv', header=header).iloc[:, 0])

    if standardize == 1:
        train_labels = train_labels[~np.isnan(train_features).any(axis=1)]
        train_features = train_features[~np.isnan(train_features).any(axis=1)]
        train_features = np.asarray(pd.DataFrame(train_features).apply(
            lambda x: (x - np.mean(x)) if (np.std(x) == 0) else (x - np.mean(x)) / np.std(x)))

        test_labels = test_labels[~np.isnan(test_features).any(axis=1)]
        test_features = test_features[~np.isnan(test_features).any(axis=1)]
        test_features = np.asarray(pd.DataFrame(test_features).apply(
            lambda x: (x - np.mean(x)) if (np.std(x) == 0) else (x - np.mean(x)) / np.std(x)))

    return train_features, train_labels, test_features, test_labels

def loadandextractcleandata(image_features_dir = image_features_dir_default, standardize=0, savetopath=''):
    #load the images features
    train_features, train_labels, test_features, test_labels =  \
        load_image_data(image_features_dir,standardize=0)

    #display(train_features)
    #display(train_labels)

    # Extract labels
    labelnames = []
    for i in range(train_labels.size):
        # print(train_labels[i])
        index = (pd.read_csv(image_features_dir + r'\train_labels.csv').iloc[i, 1])[87:].rfind('/')
        newstr = (pd.read_csv(image_features_dir + r'\train_labels.csv').iloc[i, 1])[88 + index:]
        labelnames.append(newstr)

    # display(labelnames)

    #correct the train labels
    for i in range(len(train_labels)):
        #print(train_labels[i])
        index=(pd.read_csv(image_features_dir + r'\train_labels.csv').iloc[i,1])[87:].rfind('.')
        newstr=(pd.read_csv(image_features_dir + r'\train_labels.csv').iloc[i,1])[87:87+index]
        if newstr[0] == '0':
            #print ("found leading zero")
            newstr=newstr[1:]
        #print(newstr)
        train_labels[i] = newstr

    train_labels = train_labels.astype(int)

    #display(train_labels)

    #correct the test labels
    for i in range(len(test_labels)):
        index=(pd.read_csv(image_features_dir + r'\test_labels.csv').iloc[i,1])[86:].rfind('.')
        newstr=(pd.read_csv(image_features_dir + r'\test_labels.csv').iloc[i,1])[86:86+index]
        #print(newstr)
        test_labels[i] = newstr

    test_labels = test_labels.astype(int)
    #display(test_labels)

    if savetopath!='':
        pd.DataFrame(train_features).to_csv(savetopath + '/train_features.csv', header=False, index=False)
        pd.DataFrame(train_labels).to_csv(savetopath + '/train_labels.csv', header=False, index=False)
        pd.DataFrame(test_features).to_csv(savetopath + '/test_features.csv', header=False, index=False)
        pd.DataFrame(test_labels).to_csv(savetopath + '/test_labels.csv', header=False, index=False)
        pd.DataFrame(labelnames).to_csv(savetopath + '/labelnames.csv', header=False, index=False)

    return train_features, train_labels, test_features, test_labels, labelnames